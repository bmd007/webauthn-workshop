"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.filterArgs = exports.parse = exports.getArgs = exports.options = void 0;
const yargs_1 = __importDefault(require("yargs"));
const utils_1 = require("@pinefile/utils");
const path_1 = __importDefault(require("path"));
const file_1 = require("./file");
const config_1 = require("./config");
const defaultOptions = {
    help: {
        alias: 'h',
        type: 'boolean',
        default: false,
        desc: 'Print help and available tasks',
    },
    file: {
        alias: 'f',
        type: 'string',
        default: '',
        desc: 'Path to the Pine file',
    },
    dotenv: {
        type: 'boolean',
        default: false,
        desc: 'Auto load of .env',
    },
    noColor: {
        type: 'boolean',
        default: false,
        desc: 'Disabling of color',
    },
    logLevel: {
        type: 'string',
        default: 'info',
        desc: 'Set log level: info | warn | error | silent',
    },
    require: {
        alias: 'r',
        type: 'array',
        default: [],
        desc: 'Packages to preload before Pinefile is loaded',
    },
    quiet: {
        alias: 'q',
        type: 'boolean',
        default: false,
        desc: 'Sets the log level to silent',
    },
};
const options = () => {
    const conf = (0, config_1.getConfig)();
    return {
        ...defaultOptions,
        ...((0, utils_1.isObject)(conf.options) ? conf.options : {}),
    };
};
exports.options = options;
let args = {};
const getArgs = () => args;
exports.getArgs = getArgs;
const parse = (argv, opts) => {
    args = yargs_1.default
        .parserConfiguration({
        // https://github.com/yargs/yargs/issues/1011
        'boolean-negation': false,
    })
        .help(false)
        .options(opts ? opts : (0, exports.options)())
        .pkgConf('pine', path_1.default.dirname((0, file_1.findFile)('package.json')))
        .parse(argv);
    // remove keys with dashes, e.g 'no-color' and keep 'noColor'
    Object.keys(args).forEach((key) => {
        if (key.indexOf('-') !== -1) {
            args = (0, utils_1.omit)(key, args);
        }
    });
    return args;
};
exports.parse = parse;
const filterArgs = (args) => {
    Object.keys(defaultOptions).forEach((key) => {
        if (defaultOptions[key].alias) {
            args = (0, utils_1.omit)(defaultOptions[key].alias, args);
        }
        args = (0, utils_1.omit)(key, args);
    });
    return args;
};
exports.filterArgs = filterArgs;
