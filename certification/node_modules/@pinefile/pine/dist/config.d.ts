/// <reference types="node" />
import { Options } from './args';
import { LogLevel, Logger } from './logger';
import { Runner } from './runner';
export declare type Config = {
    /**
     * Dynamic config properties.
     */
    [key: string]: any;
    /**
     * Array of dotenv files to load from root.
     */
    dotenv: string[];
    /**
     * Environment key-value pairs.
     */
    env: NodeJS.ProcessEnv;
    /**
     * Log level.
     *
     * @default 'info'
     */
    logLevel: LogLevel;
    /**
     * Set custom logger.
     */
    logger?: Logger;
    /**
     * Yargs options, key-value pairs.
     *
     * @link https://yargs.js.org/docs/#api-reference-optionskey-opt
     */
    options: Options;
    /**
     * Packages to preload before Pinefile is loaded.
     */
    require: string[];
    /**
     * Directory of Pinefile
     */
    root: string;
    /**
     * Global runner that can be used to customize the runner for all tasks.
     */
    runner?: string | Runner | Record<string, any> | Array<any>;
    /**
     * Task name of the function that is executing.
     */
    task: string;
};
/**
 * Config function
 *
 * configure((config, task) => config)
 */
export declare type ConfigFunction = (cfg: Config) => Config;
export declare const getConfig: () => Config;
/**
 * Pine can be configured via the configure function, which accepts:
 *
 * > A plain JavaScript object, this will be merged into the existing configuration.
 *
 *   configure({
 *     dotenv: ['my.env'],
 *   })
 *
 * > With a function will be given the existing configuration and the task name as a optional argument.
 * > The function should return a plain JavaScript object which will be merged into the existing configuration.
 *
 *   configure((config) => ({
 *     dotenv: ['my.env'],
 *   }))
 */
export declare const configure: (newConfig: Partial<Config> | ConfigFunction) => Config;
