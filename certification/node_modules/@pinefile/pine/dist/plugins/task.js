"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parallel = exports.series = void 0;
// @ts-ignore
const bach_1 = __importDefault(require("bach"));
const task_1 = require("../task");
/**
 * Run tasks that will be executed one after another, in sequential order.
 *
 * series('clean', 'build')
 *
 * @returns {function|Promise}
 */
const series = (...tasks) => {
    if (typeof tasks[0] === 'function') {
        return new Promise((resolve, reject) => {
            bach_1.default.series(tasks)((err, res) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(res);
                }
            });
        });
    }
    if (Array.isArray(tasks[0])) {
        return (0, exports.series)(...tasks[0]);
    }
    return (pinefile, _, args) => bach_1.default.series(...tasks.map((task) => (cb) => (0, task_1.runTask)(pinefile, task, args).then(cb)));
};
exports.series = series;
/**
 * Run tasks that will be executed simultaneously.
 *
 * parallel('clean', 'build')
 *
 * @returns {function|Promise}
 */
const parallel = (...tasks) => {
    if (typeof tasks[0] === 'function') {
        return new Promise((resolve, reject) => {
            bach_1.default.parallel(tasks)((err, res) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(res);
                }
            });
        });
    }
    if (Array.isArray(tasks[0])) {
        return (0, exports.parallel)(...tasks[0]);
    }
    return (pinefile, _, args) => bach_1.default.parallel(...tasks.map((task) => (cb) => (0, task_1.runTask)(pinefile, task, args).then(cb)));
};
exports.parallel = parallel;
