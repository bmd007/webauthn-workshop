"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findGlobalFile = exports.loadPineFile = exports.findFile = exports.isFile = exports.parsePineFile = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const utils_1 = require("@pinefile/utils");
const PINE_FILE_ORDER = Object.freeze([
    'Pinefile',
    'pinefile.js',
    'pinefile.ts',
]);
const resolveFilePathByTraversing = (pathToResolve, file = '') => {
    const customFile = path_1.default.resolve(pathToResolve, file);
    if (file && (0, exports.isFile)(customFile)) {
        return customFile;
    }
    const pineFile = PINE_FILE_ORDER.map((file) => path_1.default.resolve(pathToResolve, file)).find(exports.isFile);
    if (pineFile) {
        return pineFile;
    }
    // system root
    if (pathToResolve === path_1.default.dirname(pathToResolve)) {
        return '';
    }
    // go up a level and try it again
    return resolveFilePathByTraversing(path_1.default.dirname(pathToResolve));
};
/**
 * Parse Pinefile to object with valid key and value.
 *
 * Will convert
 * - 'b:c' keys to object { b: { c: { _: '' } } }
 * - 'b' keys to object { b: { _: '' } }
 *
 * @param {string} pineFile
 * @param {string} sep
 *
 * @returns {object}
 */
const parsePineFile = (pineFile, sep = ':') => {
    let obj = (0, utils_1.isObject)(pineFile.default) ? pineFile.default : pineFile;
    // convert non-object to object with default key.
    if (!(0, utils_1.isObject)(obj)) {
        obj = { default: obj };
    }
    return Object.keys(obj).reduce((prev, key) => {
        if ((0, utils_1.isObject)(obj[key])) {
            prev[key] = (0, exports.parsePineFile)(obj[key]);
        }
        else if (key.indexOf(sep) !== -1) {
            prev = (0, utils_1.merge)(prev, key
                .split(sep)
                .reverse()
                .reduce((prev2, cur2) => {
                return Object.keys(prev2).length
                    ? { [cur2]: prev2 }
                    : { [cur2]: { _: obj[key] } };
            }, {}));
        }
        else if (key === '_') {
            prev[key] = obj[key];
        }
        else {
            prev[key] = { _: obj[key] };
        }
        return prev;
    }, {});
};
exports.parsePineFile = parsePineFile;
const isFile = (filePath) => fs_1.default.existsSync(filePath) && !fs_1.default.lstatSync(filePath).isDirectory();
exports.isFile = isFile;
const findFile = (file = '') => {
    if (path_1.default.isAbsolute(file) && (0, exports.isFile)(file)) {
        return file;
    }
    return resolveFilePathByTraversing(path_1.default.resolve('.'), file);
};
exports.findFile = findFile;
const loadPineFile = (input) => {
    const file = (0, exports.findFile)(input);
    // eslint-disable-next-line
    const body = require(file);
    return {
        file,
        dirname: path_1.default.dirname(file),
        ext: path_1.default.extname(file),
        pineFile: (0, exports.parsePineFile)(body),
    };
};
exports.loadPineFile = loadPineFile;
const findGlobalFile = () => ['', '.pine'].reduce((prev, cur) => prev ||
    PINE_FILE_ORDER.map((file) => path_1.default.join(os_1.default.homedir(), cur, file)).find(exports.isFile) ||
    '', '');
exports.findGlobalFile = findGlobalFile;
