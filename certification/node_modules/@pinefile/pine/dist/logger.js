"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setLogger = exports.internalLog = exports.createLogger = exports.Logger = exports.timeInSecs = void 0;
const format_1 = __importDefault(require("date-fns/format"));
const color_1 = require("./color");
const config_1 = require("./config");
const formatDate = (date) => color_1.color.gray((0, format_1.default)(date, '[kk:mm:ss]'));
const newDate = () => new Date();
const LogLevels = {
    silent: 0,
    error: 1,
    warn: 2,
    info: 3,
};
const output = (type, message, options = {}) => {
    const logLevel = options.logLevel
        ? options.logLevel
        : (process.env.LOG_LEVEL ||
            (0, config_1.getConfig)().logLevel ||
            '').toLowerCase();
    if (LogLevels[logLevel] >= LogLevels[type]) {
        const date = formatDate(newDate());
        const method = type === 'info' ? 'log' : type;
        const args = [date, options.prefix && options.prefix, ...message].filter(Boolean);
        console[method].apply(null, args);
    }
};
const timeInSecs = (time) => {
    const milliseconds = String((time % 1000) / 100)
        .split('.')
        .pop();
    const seconds = Math.floor((time / 1000) % 60);
    return `${seconds}.${milliseconds}s`;
};
exports.timeInSecs = timeInSecs;
class Logger {
    constructor(options = {}) {
        this.options = { prefix: '', ...options };
    }
    info(...message) {
        output('info', message, this.options);
    }
    warn(...message) {
        output('warn', message, this.options);
    }
    error(...message) {
        output('error', message, this.options);
    }
}
exports.Logger = Logger;
const createLogger = (options = {}) => new Logger(options);
exports.createLogger = createLogger;
let _internalLogger = (0, exports.createLogger)();
const internalLog = () => _internalLogger;
exports.internalLog = internalLog;
const setLogger = (logger) => (_internalLogger = logger || _internalLogger || (0, exports.createLogger)());
exports.setLogger = setLogger;
