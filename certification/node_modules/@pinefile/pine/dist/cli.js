"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runCLI = void 0;
const path_1 = __importDefault(require("path"));
const utils_1 = require("@pinefile/utils");
const args_1 = require("./args");
const color_1 = require("./color");
const config_1 = require("./config");
const task_1 = require("./task");
const file_1 = require("./file");
const logger_1 = require("./logger");
/**
 * Print help options.
 */
const printOptions = () => {
    const opts = (0, args_1.options)();
    const keys = Object.keys(opts).map((key) => ({
        key,
        alias: opts[key].alias,
        flag: (0, utils_1.camelCaseToDash)(key),
    }));
    const len = keys.reduce((c, v) => (c.flag.length > v.flag.length ? c : v)).flag.length +
        2;
    console.log(`
Options:`);
    keys.forEach((key) => {
        let space = '';
        for (let i = 0; i < len - key.flag.length; i++) {
            space += ' ';
        }
        console.log(`  ${key.alias ? `-${key.alias}, ` : `    `}--${key.flag}${space}${opts[key.key].desc}`);
    });
};
/**
 * Print help commands.
 */
const printCommands = () => {
    const commands = [
        {
            key: 'global',
            desc: 'Run tasks in global pinefile',
        },
    ];
    console.log(`
Commands:`);
    const len = commands.reduce((c, v) => (c.key.length > v.key.length ? c : v)).key
        .length + 2;
    commands.forEach((key) => {
        let space = '';
        for (let i = 0; i < len - key.key.length; i++) {
            space += ' ';
        }
        console.log(`  ${key.key}${space}${key.desc}`);
    });
};
/**
 * Print help text.
 */
const help = () => {
    console.log(`Usage: pine [<command>] <task> <options>`);
    printOptions();
    printCommands();
};
/**
 * Print tasks from Pinefile.
 *
 * @param {object}  pineFile
 * @param {boolean} global
 * @param {string}  prefix
 */
const printTasks = (pineFile, global, prefix = '') => {
    try {
        const keys = Object.keys(pineFile);
        if (!prefix) {
            console.log(`\nTasks (${global ? 'global' : 'local'}):`);
        }
        keys.sort((a, b) => a.localeCompare(b));
        keys.forEach((key) => {
            if (!(0, task_1.validTaskValue)(pineFile[key])) {
                return;
            }
            if ((0, utils_1.isObject)(pineFile[key]) && pineFile[key]._) {
                delete pineFile[key]._;
            }
            console.log(`  ${prefix}${key}`);
            if ((0, utils_1.isObject)(pineFile[key]) && Object.keys(pineFile[key]).length) {
                printTasks(pineFile[key], global, `${prefix}${key}:`);
            }
        });
    }
    catch (err) {
        // todo
    }
};
/**
 * Run Pine CLI.
 *
 * @param   {array} argv
 *
 * @returns {Promise}
 */
const runCLI = async (argv) => {
    try {
        const global = argv[0] === 'global';
        const args = (0, args_1.parse)(global ? argv.slice(1) : argv);
        const file = global ? (0, file_1.findGlobalFile)() : (0, file_1.findFile)(args.file);
        if (!file) {
            if (args.help) {
                help();
            }
            else {
                (0, logger_1.internalLog)().error(global
                    ? 'No global pinefile was found in your home folder or the ~/.pine directory.'
                    : 'No pinefile was found.');
            }
            return;
        }
        const name = args._.shift() || 'default';
        (0, color_1.setupColor)(args);
        // configure before pinefile is loaded
        (0, config_1.configure)((config) => ({
            dotenv: args.dotenv ? ['.env'] : [],
            env: {
                ...(!args.noColor ? { FORCE_COLOR: '1' } : {}),
                ...config.env,
            },
            root: path_1.default.dirname(file),
            logLevel: args.quiet ? 'silent' : args.logLevel,
            require: [
                ...(Array.isArray(args.require) ? args.require : []),
                ...config.require,
            ],
            task: name,
        }));
        const { pineFile } = (0, file_1.loadPineFile)(file);
        if (args.help) {
            help();
            printTasks(pineFile, global);
            return;
        }
        const config = (0, config_1.getConfig)();
        const configArgs = (0, utils_1.isObject)(config.options) && Object.keys(config.options).length
            ? (0, args_1.parse)(argv, config.options)
            : {};
        return await (0, task_1.runTask)(pineFile, name, {
            ...args,
            ...configArgs,
            _: args._,
        });
    }
    catch (err) {
        if (err instanceof Error) {
            (0, logger_1.internalLog)().error(err);
        }
        return;
    }
};
exports.runCLI = runCLI;
